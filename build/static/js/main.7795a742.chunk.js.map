{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","_super","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","value","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","hasWon","flipCellsAround","checkWin","generateBoard","row","nrows","newRow","col","ncols","Math","random","chanceLightStartsOn","push","coord","_this$props","_coord","slicedToArray","y","x","flipCell","forEach","dir","ver","hor","console","log","setState","index","items","src_Cell_0","key","_this2","map","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7795a742.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.value);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.3,\n  };\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false,\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.createBoard = this.createBoard.bind(this);\n    this.checkWin = this.checkWin.bind(this);\n    this.generateBoard = this.generateBoard.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    // let board = [\n    //   [true, true, true, true],\n    //   [true, true, false, true],\n    //   [true, false, false, false],\n    //   [true, true, false, true],\n    // ];\n    // return board;\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let row = 0; row < this.props.nrows; row++) {\n      let newRow = [];\n      for (let col = 0; col < this.props.ncols; col++) {\n        let light = Math.random();\n        if (light <= this.props.chanceLightStartsOn) {\n          newRow.push(true);\n        } else {\n          newRow.push(false);\n        }\n      }\n      board.push(newRow);\n    }\n    return board;\n  }\n\n  checkWin() {\n    let board = this.state.board;\n    for (let row = 0; row < this.props.nrows; row++) {\n      for (let col = 0; col < this.props.ncols; col++) {\n        if (board[row][col] === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord;\n    let hasWon = false;\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    let directions = [\n      [0, 1],\n      [1, 0],\n      [-1, 0],\n      [0, -1],\n    ];\n    flipCell(y, x);\n    directions.forEach((dir) => {\n      let ver = dir[0];\n      let hor = dir[1];\n      flipCell(y + ver, x + hor);\n      console.log(y + ver, x + hor);\n    });\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    hasWon = this.checkWin();\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n  generateBoard(row, index) {\n    console.log(index);\n    let items = [];\n    for (let col = 0; col < this.props.ncols; col++) {\n      items.push(\n        <Cell\n          key={[index, col]}\n          value={[index, col]}\n          isLit={this.state.board[index][col]}\n          flipCellsAroundMe={this.flipCellsAround}\n        />\n      );\n    }\n    return items;\n  }\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    return (\n      <div className=\"Board\">\n        <h1 className=\"gameTitle\">Lights Out Game</h1>\n        {this.state.hasWon ? (\n          <div className=\"winnerSign\">\n            <div className=\"neon\">Game </div>\n            <div className=\"flux\">Over! </div>\n          </div>\n        ) : (\n          <div>\n            <tbody className=\"grid-container\">\n              {this.state.board.map((row, index) => (\n                <trow>{this.generateBoard(row, index)}</trow>\n              ))}\n            </tbody>\n          </div>\n        )}\n        <p>{this.board}</p>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}